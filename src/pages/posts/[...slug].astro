---
import path from "node:path";
import License from "@components/misc/License.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import Carousel from "@components/Carousel.astro";
import type { GetStaticPaths } from "astro";
import { getSortedPosts, Post } from "@utils/content-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import { profileConfig, siteConfig } from "@config";
import { formatDateToYYYYMMDD } from "@utils/date-utils";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import PostMetadata from "@components/PostMeta.astro";


export async function getStaticPaths() {
	const blogEntries = await getSortedPosts();
	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;

const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	keywords: entry.data.tags,
	author: {
		"@type": "Person",
		name: profileConfig.name,
		url: Astro.site,
	},
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: entry.data.lang
		? entry.data.lang.replace("_", "-")
		: siteConfig.lang.replace("_", "-"),
};

const renderBody = () => {
    // Custom rendering options to handle embedded entries
    const options = {
        renderNode: {
            "embedded-entry-inline": (node) => {
                    const carouselEntryId = node.data.target.sys.id;

                    if (node.data.target.sys.contentType.sys.id === "carousel") {
                        return `<Carousel entryId="${carouselEntryId}" />`;
                    } else {
                        return ""; // Return empty string for other embedded entries
                    }
                },
        },
    };
    return documentToHtmlString(entry.body, options);
};

const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
}

const pubDateFormatted = formatDate(entry.data.pubDate);
---
<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={[]}>
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full "]}>
            {/* word count and reading time -  Replaced with Contentful data when available */}
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                {/* You may need to implement a word count utility function */}
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{/* Replace with word count if available */} Words</div>
                </div>
                {/* You may need to implement a reading time utility function */}
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">{/* Replace with estimated read time if available */} Min Read</div>
                </div>
            </div>

            {/* title */}
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {entry.data.title}
                </div>
            </div>

            {/* metadata  - Display publish date and tags */}
            <div class="onload-animation">
                <PostMetadata
                    class="mb-5 flex items-center"    
                    published={entry.data.pubDate}
                    tags={entry.data.tags}
                    categories={entry.data.categories}
                ></PostMetadata>
                {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            {/* Render Carousel conditionally */}
            {entry.data.carousel && entry.data.carouselImages && entry.data.carouselImages.length > 0 && (
                <Carousel images={entry.data.carouselImages} />
            )}


            {/* post content - Render the Rich Text body */}
            <div class="mb-6 markdown-content onload-animation" set:html={renderBody()} data-pagefind-body></div>

            

            {licenseConfig.enable && <License title={entry.data.title} slug={entry.slug} pubDate={entry.data.published} class="mb-6 rounded-xl license-container onload-animation"/>}
        </div>
    </div>
</MainGridLayout>
